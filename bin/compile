#!/usr/bin/env bash

set -e


echo "---> detect in compile"

[[ -f "$1/standalone" ]] && {
	echo "------> standalone file found"
} || {
	echo "------> detect failed, standalone file not found."
	exit 1
}


echo "---> compile standalone" 

BUILD_DIR=$1
CACHE_DIR=$2
BUILD_PACK_DIR=$(dirname $(dirname $0))
APP_HOME="/home/vcap"

echo "------> BUILD_DIR: $BUILD_DIR"
echo "------> CACHE_DIR: $CACHE_DIR"
echo "------> BUILD_PACK_DIR: $BUILD_PACK_DIR"
echo "------> Compile script: $0"

[[ ! -d "$BUILD_DIR" ]] && {
	echo "------> mkdir -p $BUILD_DIR"
	mkdir -p "$BUILD_DIR"
}

[[ ! -d "$CACHE_DIR" ]] && {
	echo "------> mkdir -p $CACHE_DIR"
	mkdir -p "$CACHE_DIR"
}


echo "------> install golang"
GOLANG_URL="https://go.googlecode.com/files"
GOLANG_FILE="go1.2.linux-amd64.tar.gz"

cd $CACHE_DIR

echo "---------> cd $CACHE_DIR, wget $GOLANG_URL/$GOLANG_FILE, and tar xf, and rm"
wget -q $GOLANG_URL/$GOLANG_FILE || echo "------> wget go error"
tar xf $GOLANG_FILE || echo "------> tar xf golang error"
rm -f $GOLANG_FILE

#echo "------> mv go/ to $CACHE_DIR/"
#mv go/ $CACHE_DIR/ || echo "------> mv go/ error"

export GOROOT=$CACHE_DIR/go
export PATH=$PATH:$GOROOT/bin

echo "---------> GOROOT: $GOROOT"
echo "---------> PATH: $PATH"
echo "---------> run go version"
go version || echo "------> go version error"

echo "---------> go build *.go"
go build $BUILD_DIR/*.go

#TODO
mv $BUILD_DIR/* $APP_HOME/app


#[[ -f "$BUILD_DIR/id_rsa_tunnel" ]] && {
#	SSH_DIR=$APP_HOME/.ssh
	#mkdir -m 700 -p $SSH_DIR
#	mkdir -p $SSH_DIR && chmod 700 $SSH_DIR
#	mv $BUILD_DIR/id_rsa_tunnel $SSH_DIR && chmod 600 $SSH_DIR/id_rsa_tunnel
#}


echo "------> Creating start script: $BUILD_DIR/start.sh"

cat > "$BUILD_DIR/start.sh" <<\EOF
#!/bin/bash

export APP_HOME=/home/vcap
##S#SH_DIR=$APP_HOME/.ssh
export GOROOT=$APP_HOME/go
export PATH=$PATH:$GOROOT/bin

###if [ -d "$APP_HOME/app/.ssh" ]; then
###    echo "------> Copied SSH keys"
###    cp -R $APP_HOME/app/.ssh $APP_HOME/
###    # Start reverse SSH Tunnel
###    echo "------> Starting SSH Reverse Tunnel"
###    ssh -f -N -T -R 2222:localhost:\$VCAP_APP_PORT tunnel@aaa.io
###fi

###echo "------> ssh -v -i $SSH_DIR/id_rsa_tunnel -f -N -T -R 2222:localhost:$VCAP_APP_PORT tunnel@aaa.io"
###ssh -v -i $SSH_DIR/id_rsa_tunnel -f -N -T -R 2222:localhost:$VCAP_APP_PORT tunnel@aaa.io
###echo "------> ssh to tunnel@aaa.io"
###ssh -i $BUILD_DIR/id_rsa_tunnel tunnel@aaa.io pwd

echo "------> Starting Web Server"
###python $APP_HOME/app/web.py /
$APP_HOME/app/hello

EOF

chmod 755 "$BUILD_DIR/start.sh"


echo "------> Creating script to start a Python Web server: $BUILD_DIR/web.py"

cat > "$BUILD_DIR/web.py" <<EOF
#!/usr/bin/env python

import SimpleHTTPServer
import SocketServer
import os
import sys

###fin = open('/proc/cpuinfo', 'rt')
###fout = open('cpuinfo', 'wt')
###fout.write(fin.read())
###fin.close()
###fout.close()

if len(sys.argv) == 2:
    print 'Serving files from [%s]' % sys.argv[1]
    os.chdir(sys.argv[1])
else:
    print 'Service files from [%s]' % os.getcwd()

httpd = SocketServer.TCPServer(
    (os.environ.get('VCAP_APP_HOST', 'localhost'),
     int(os.environ.get('VCAP_APP_PORT', 8080))),
    SimpleHTTPServer.SimpleHTTPRequestHandler)
httpd.serve_forever()
EOF

#echo "------> pwd && ls -al"
#pwd && ls -la

echo "------> ls -la $BUILD_DIR"
ls -la $BUILD_DIR

echo "------> ls -la $APP_HOME"
# the $BUID_DIR's files do not move to this dir by dea at this time. 
ls -la $APP_HOME

echo "------> ls -la /tmp/buildpacks"
ls -la /tmp/buildpacks

echo "------> ls -la $BUILDPACK_CACHE"
ls -la $BUILDPACK_CACHE


#netstat -nat

#echo "------> whoami: `whoami`"

#echo "------> ssh"
#which ssh || true
#ssh -V || true

#echo "------> sshd"
#which sshd || true
#sshd -V || true

#echo "Directory listing:"
#ls -la

#echo "Listing Build Pack Directory:"
#ls -la /tmp/buildpacks

#echo "Listing Build Pack Cache:"
#ls -la "$BUILDPACK_CACHE"

#echo "Listing Platform Config:"
#cat "$PLATFORM_CONFIG"
#echo "------> $PLATFORM_CONFIG"

#echo "Listing Environment:"
#env

#echo "------> python versions:"
#python -V
#echo "------> ruby versions:"
#ruby -v
#echo "------> bash versions:"
#bash --version
#echo "------> zsh versions:"
#zsh --version
#perl -v


#echo "Downloading Jonas:"
#curl -s -O http://orange-buildpacks-binaries.s3-website-us-west-1.amazonaws.com/jonas/jonas-full-5.2.4-bin.tar.gz
#tar zxf jonas-full-5.2.4-bin.tar.gz
#ls -la .
#mv jonas-full-5.2.4 $BUILD_DIR/

#echo "Output large amount of data"
#for i in `seq 1 100000`; do
#    echo "Hello World!"
#done

#echo "Check for FUSE support"
#/sbin/mount.fuse -h
#ls -l /usr/share/doc/fuse-utils

#echo "CPU Info"
#cat /proc/cpuinfo
