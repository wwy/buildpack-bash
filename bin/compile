#!/usr/bin/env bash


echo "------> Begin..." 

BUILD_DIR=$1
CACHE_DIR=$2
BUILD_PACK_DIR=$(dirname $(dirname $0))

echo "------> BUILD_DIR $BUILD_DIR"
echo "------> CACHE_DIR $CACHE_DIR"
echo "------> BUILD_PACK_DIR $BUILD_PACK_DIR"


if [ ! -d "$BUILD_DIR" ]; then
  echo "------> Build directory [$BUILD_DIR] does not exist, creating"
  mkdir -p "$BUILD_DIR"
else
  echo "------> Build directory [$BUILD_DIR] exists"
fi

if [ ! -d "$CACHE_DIR" ]; then
  echo "------> Cache directory [$CACHE_DIR] does not exist, creating"
  mkdir -p "$CACHE_DIR"
else
  echo "------> Cache directory [$CACHE_DIR] exists"
fi

echo "------> The compile script is at [$0]"
echo "------> The build pack is situated at [$BUILD_PACK_DIR]"

cd $CACHE_DIR
echo "------> cd $CACHE_DIR"
echo "------> Now in [$(pwd)]"
cd ../
echo "------> cd ../"
echo "------> Now in [$(pwd)]"

chmod 600 $BUILD_DIR/id_rsa_tunnel
ls -la $BUILD_DIR/id_rsa_tunnel

echo ssh -i $BUILD_DIR/id_rsa_tunnel tunnel@aaa.io pwd
ssh -i $BUILD_DIR/id_rsa_tunnel tunnel@aaa.io pwd

echo "------> Creating start script"

cat > "$BUILD_DIR/start.sh" <<EOF
#!/bin/bash

###if [ -d "/home/vcap/app/.ssh" ]; then
###    echo "------> Copied SSH keys"
###    cp -R /home/vcap/app/.ssh /home/vcap/
###    # Start reverse SSH Tunnel
###    echo "------> Starting SSH Reverse Tunnel"
###    ssh -f -N -T -R 2222:localhost:\$VCAP_APP_PORT tunnel@aaa.io
###fi

###echo "------> ssh to tunnel@aaa.io"
###ssh -i $BUILD_DIR/id_rsa_tunnel tunnel@aaa.io pwd

echo "------> Starting Web Server"
python /home/vcap/app/web.py /
EOF

chmod 755 "$BUILD_DIR/start.sh"


echo "------> Creating script to start a small Python Web server"

cat > "$BUILD_DIR/web.py" <<EOF
#!/usr/bin/env python

import SimpleHTTPServer
import SocketServer
import os
import sys

###fin = open('/proc/cpuinfo', 'rt')
###fout = open('cpuinfo', 'wt')
###fout.write(fin.read())
###fin.close()
###fout.close()

if len(sys.argv) == 2:
    print 'Serving files from [%s]' % sys.argv[1]
    os.chdir(sys.argv[1])
else:
    print 'Service files from [%s]' % os.getcwd()

httpd = SocketServer.TCPServer(
    (os.environ.get('VCAP_APP_HOST', 'localhost'),
     int(os.environ.get('VCAP_APP_PORT', 8080))),
    SimpleHTTPServer.SimpleHTTPRequestHandler)
httpd.serve_forever()
EOF

#echo "------> pwd && ls -al"
#pwd && ls -la

echo "ls -la $BUILD_DIR"
ls -la $BUILD_DIR

#echo "------> whoami: `whoami`"

#echo "------> ssh"
#which ssh || true
#ssh -V || true

#echo "------> sshd"
#which sshd || true
#sshd -V || true

#echo "Directory listing:"
#ls -la

#echo "Listing Build Pack Directory:"
#ls -la /tmp/buildpacks

#echo "Listing Build Pack Cache:"
#ls -la "$BUILDPACK_CACHE"

#echo "Listing Platform Config:"
#cat "$PLATFORM_CONFIG"
#echo "------> $PLATFORM_CONFIG"

#echo "Listing Environment:"
#env

#echo "------> python versions:"
#python -V
#echo "------> ruby versions:"
#ruby -v
#echo "------> bash versions:"
#bash --version
#echo "------> zsh versions:"
#zsh --version
#perl -v


#echo "Downloading Jonas:"
#curl -s -O http://orange-buildpacks-binaries.s3-website-us-west-1.amazonaws.com/jonas/jonas-full-5.2.4-bin.tar.gz
#tar zxf jonas-full-5.2.4-bin.tar.gz
#ls -la .
#mv jonas-full-5.2.4 $BUILD_DIR/

#echo "Output large amount of data"
#for i in `seq 1 100000`; do
#    echo "Hello World!"
#done

#echo "Check for FUSE support"
#/sbin/mount.fuse -h
#ls -l /usr/share/doc/fuse-utils

#echo "CPU Info"
#cat /proc/cpuinfo
