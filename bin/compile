#!/usr/bin/env bash

sleep 3

build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)

echo "------> build $build"
echo "------> cache $cache"


echo "------> Running cache test..."

BUILD_DIR=$1
CACHE_DIR=$2
BUILD_PACK_DIR=$(dirname $(dirname $0))

echo "------> BUILD_DIR $BUILD_DIR"
echo "------> CACHE_DIR $CACHE_DIR"
echo "------> BUILD_PACK_DIR $BUILD_PACK_DIR"

if [ ! -d "$BUILD_DIR" ]; then
  echo "------> Build directory [$BUILD_DIR] does not exist, creating"
  mkdir -p "$BUILD_DIR"
else
  echo "------> Build directory [$BUILD_DIR] exists"
fi

if [ ! -d "$CACHE_DIR" ]; then
  echo "------> Cache directory [$CACHE_DIR] does not exist, creating"
  mkdir -p "$CACHE_DIR"
else
  echo "------> Cache directory [$CACHE_DIR] exists"
fi

echo "------> The compile script is at [$0]"
echo "------> The build pack is situated at [$BUILD_PACK_DIR]"

echo "------> Moving to the cache dir..."
cd "$CACHE_DIR"
echo "------> Now in [$(pwd)]"

#echo "Directory listing:"
#ls -la

#echo "Listing Build Pack Directory:"
#ls -la /tmp/buildpacks

#echo "Listing Build Pack Cache:"
#ls -la "$BUILDPACK_CACHE"

#echo "Listing Platform Config:"
#cat "$PLATFORM_CONFIG"
#echo "------> $PLATFORM_CONFIG"

#echo "Listing Environment:"
#env

#echo "------> python versions:"
#python -V
#echo "------> ruby versions:"
#ruby -v
#echo "------> bash versions:"
#bash --version
#echo "------> zsh versions:"
#zsh --version
#perl -v


#echo "Downloading Jonas:"
#curl -s -O http://orange-buildpacks-binaries.s3-website-us-west-1.amazonaws.com/jonas/jonas-full-5.2.4-bin.tar.gz
#tar zxf jonas-full-5.2.4-bin.tar.gz
#ls -la .
#mv jonas-full-5.2.4 $BUILD_DIR/

#echo "Output large amount of data"
#for i in `seq 1 100000`; do
#    echo "Hello World!"
#done

#echo "Check for FUSE support"
#/sbin/mount.fuse -h
#ls -l /usr/share/doc/fuse-utils

#echo "CPU Info"
#cat /proc/cpuinfo

cd ../
echo "------> Now in [$(pwd)]"
echo "------> Creating start script"
cat > "$BUILD_DIR/start.sh" <<EOF
#!/bin/bash
#
# Start Python Web Server & SSH Reverse Tunnel
#
# Copy SSH keys if included with the app
###if [ -d "/home/vcap/app/.ssh" ]; then
###    echo "------> Copied SSH keys"
###    cp -R /home/vcap/app/.ssh /home/vcap/
###    # Start reverse SSH Tunnel
###    echo "------> Starting SSH Reverse Tunnel"
###    ssh -f -N -T -R 2222:localhost:\$VCAP_APP_PORT daniel@\$SSH_HOST
###fi
# Start Python Server
echo "------> Starting Web Server"
python /home/vcap/app/boot.py /
EOF
chmod 755 "$BUILD_DIR/start.sh"

echo "------> Creating script to start a small Python Web server"
cat > "$BUILD_DIR/boot.py" <<EOF
#!/usr/bin/env python
#
# Simple HTTP Server for accessing files in target director
#
import SimpleHTTPServer
import SocketServer
import os
import sys

###fin = open('/proc/cpuinfo', 'rt')
###fout = open('cpuinfo', 'wt')
###fout.write(fin.read())
###fin.close()
###fout.close()

if len(sys.argv) == 2:
    print 'Serving files from [%s]' % sys.argv[1]
    os.chdir(sys.argv[1])
else:
    print 'Service files from [%s]' % os.getcwd()

httpd = SocketServer.TCPServer(
    (os.environ.get('VCAP_APP_HOST', 'localhost'),
     int(os.environ.get('VCAP_APP_PORT', 8080))),
    SimpleHTTPServer.SimpleHTTPRequestHandler)
httpd.serve_forever()
EOF

